#!/usr/bin/env python3
"""
üß™ Tests complets des prompts intelligents de Sylvie
Version 2.0 - Validation de la compr√©hension flexible
"""

import asyncio
import json
import sys
import os
from datetime import datetime

# Ajout du chemin pour les imports
sys.path.append(os.path.dirname(os.path.dirname(__file__)))

from app.services.intelligent_prompts import IntelligentPrompts

def test_time_extraction():
    """Test de l'extraction des r√©f√©rences temporelles"""
    print("üïê Test extraction temps...")
    
    test_cases = [
        "rdv demain 14h",
        "r√©union vendredi matin",
        "appel cet apr√®s-midi", 
        "√©v√©nement lundi √† 16h30",
        "meeting demain midi",
        "pr√©sentation apr√®s-demain 9h"
    ]
    
    for text in test_cases:
        time_info = IntelligentPrompts.extract_time_references(text)
        print(f"  '{text}' ‚Üí {time_info}")
    
    print("‚úÖ Extraction temps test√©e\n")

def test_prompt_generation():
    """Test de g√©n√©ration de prompts"""
    print("üìù Test g√©n√©ration prompts...")
    
    # Test prompt d'intention
    message = "cr√©e un rdv demain 14h avec Pierre"
    intent_prompt = IntelligentPrompts.get_intent_analysis_prompt(message, "conversation pr√©c√©dente")
    print(f"Prompt d'intention g√©n√©r√© (longueur: {len(intent_prompt)} chars)")
    
    # Test prompt de r√©ponse
    response_prompt = IntelligentPrompts.get_response_generation_prompt(
        message="check mes mails",
        intent="check_emails", 
        action_taken="V√©rification emails",
        action_result={"count": 5, "unread": 2}
    )
    print(f"Prompt de r√©ponse g√©n√©r√© (longueur: {len(response_prompt)} chars)")
    
    # Test prompt d'erreur
    error_prompt = IntelligentPrompts.get_error_handling_prompt(
        "permission_denied",
        "Acc√®s Gmail refus√©"
    )
    print(f"Prompt d'erreur g√©n√©r√© (longueur: {len(error_prompt)} chars)")
    
    print("‚úÖ G√©n√©ration prompts test√©e\n")

def simulate_conversations():
    """Simulation de conversations flexibles"""
    print("üí¨ Simulation conversations flexibles...")
    
    flexible_messages = [
        # Calendrier
        "cr√©e un rdv demain 14h",
        "planifie une r√©union √©quipe vendredi",
        "ajoute un event lundi matin",
        "rdv dentiste apr√®s-demain 16h30",
        
        # Emails  
        "check mes mails",
        "regarde si j'ai re√ßu quelque chose",
        "v√©rifie ma bo√Æte mail",
        "envoie un mail √† Pierre",
        
        # T√¢ches
        "ajoute une t√¢che",
        "note que je dois appeler Marie",
        "cr√©e une todo: acheter du pain",
        "mes t√¢ches du jour",
        
        # Drive
        "mes fichiers r√©cents",
        "cherche le document budget",
        "organise mon drive",
        "montre mes photos"
    ]
    
    for msg in flexible_messages:
        time_info = IntelligentPrompts.extract_time_references(msg)
        time_str = f" [temps: {time_info}]" if time_info else ""
        print(f"  '{msg}'{time_str}")
    
    print("‚úÖ Conversations simul√©es\n")

def test_system_prompt():
    """Test du prompt syst√®me"""
    print("ü§ñ Test prompt syst√®me...")
    
    system_prompt = IntelligentPrompts.get_system_prompt()
    print(f"Prompt syst√®me: {len(system_prompt)} caract√®res")
    
    # V√©rifications
    checks = [
        ("personnalisation", "mon assistante" in system_prompt.lower()),
        ("google workspace", "google workspace" in system_prompt.lower()),
        ("naturel", "naturel" in system_prompt.lower()),
        ("tutoiement", "tu es" in system_prompt.lower()),
        ("efficacit√©", "efficace" in system_prompt.lower())
    ]
    
    for check_name, check_result in checks:
        status = "‚úÖ" if check_result else "‚ùå"
        print(f"  {status} {check_name}")
    
    print("‚úÖ Prompt syst√®me test√©\n")

async def main():
    """Test principal"""
    print("üöÄ Tests des Prompts Intelligents Sylvie v2.0")
    print("=" * 50)
    
    test_time_extraction()
    test_prompt_generation()  
    simulate_conversations()
    test_system_prompt()
    
    print("üéâ Tous les tests des prompts intelligents termin√©s !")
    print("\nüìã Pr√™t pour tester avec Sylvie:")
    print("  - 'rdv demain 14h avec Pierre'")
    print("  - 'check mes mails'") 
    print("  - 'ajoute une t√¢che: appeler Marie'")
    print("  - 'mes fichiers r√©cents'")

if __name__ == "__main__":
    asyncio.run(main())
