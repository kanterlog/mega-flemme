"""
üöÄ Application principale KanterMator
Phase 2.6 - Application FastAPI compl√®te

Agent d'automatisation Google Workspace pour l'√©ducation
Gestion intelligente des progressions p√©dagogiques
"""

from fastapi import FastAPI, Request
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import JSONResponse
from contextlib import asynccontextmanager
import structlog
from datetime import datetime

from app.utils.config import settings
from app.utils.database import init_database, db_manager
from app.routers import (
    progressions_router, 
    automation_router, 
    drive_router, 
    system_router
)

# Configuration structlog
structlog.configure(
    processors=[
        structlog.stdlib.filter_by_level,
        structlog.stdlib.add_logger_name,
        structlog.stdlib.add_log_level,
        structlog.stdlib.PositionalArgumentsFormatter(),
        structlog.processors.TimeStamper(fmt="iso"),
        structlog.dev.ConsoleRenderer()
    ],
    context_class=dict,
    logger_factory=structlog.stdlib.LoggerFactory(),
    wrapper_class=structlog.stdlib.BoundLogger,
    cache_logger_on_first_use=True,
)

logger = structlog.get_logger(__name__)

@asynccontextmanager
async def lifespan(app: FastAPI):
    """Gestionnaire de cycle de vie de l'application"""
    # D√©marrage
    logger.info("üöÄ D√©marrage de KanterMator", 
               version=settings.VERSION,
               environment=settings.ENVIRONMENT)
    
    try:
        # Initialisation de la base de donn√©es
        init_database()
        logger.info("‚úÖ Base de donn√©es initialis√©e")
        
        # Test de connexion aux services Google
        try:
            from app.services.google_auth import GoogleAuthService
            auth_service = GoogleAuthService()
            credentials = auth_service.get_credentials()
            logger.info("‚úÖ Authentification Google valid√©e")
        except Exception as e:
            logger.warning("‚ö†Ô∏è Probl√®me d'authentification Google", error=str(e))
        
        # Test de connexion Redis (pour Celery)
        try:
            import redis
            r = redis.from_url(settings.REDIS_URL)
            r.ping()
            logger.info("‚úÖ Connexion Redis valid√©e")
        except Exception as e:
            logger.warning("‚ö†Ô∏è Probl√®me de connexion Redis", error=str(e))
            
    except Exception as e:
        logger.error("‚ùå Erreur lors de l'initialisation", error=str(e))
        raise
    
    yield
    
    # Arr√™t
    logger.info("‚èπÔ∏è Arr√™t de KanterMator")

# Cr√©ation de l'application FastAPI
app = FastAPI(
    title="KanterMator API",
    description="""
    ü§ñ **Agent d'automatisation Google Workspace pour l'√©ducation**
    
    KanterMator automatise la cr√©ation de dossiers hebdomadaires, 
    la gestion des raccourcis et l'organisation p√©dagogique dans Google Drive
    √† partir des progressions d√©finies dans Google Sheets.
    
    ## Fonctionnalit√©s
    
    - üìä **Progressions** : Synchronisation depuis Google Sheets
    - ü§ñ **Automatisation** : Planification et ex√©cution des t√¢ches
    - üìÅ **Google Drive** : Gestion des dossiers et raccourcis
    - üîß **Syst√®me** : Monitoring et validation des int√©grations
    
    ## Workflow
    
    1. Lecture des progressions hebdomadaires dans Google Sheets
    2. Automatisation programm√©e (samedi soir par d√©faut)
    3. Cr√©ation de la structure de dossiers dans Google Drive
    4. G√©n√©ration des raccourcis vers les ressources communes
    5. Archivage automatique des anciennes semaines
    """,
    version=settings.VERSION,
    lifespan=lifespan,
    docs_url="/docs",
    redoc_url="/redoc"
)

# Configuration CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=settings.ALLOWED_ORIGINS,
    allow_credentials=True,
    allow_methods=["GET", "POST", "PUT", "DELETE"],
    allow_headers=["*"],
)

# Inclusion des routeurs
app.include_router(progressions_router, prefix="/api/v1")
app.include_router(automation_router, prefix="/api/v1")
app.include_router(drive_router, prefix="/api/v1")
app.include_router(system_router, prefix="/api/v1")

# Gestionnaire d'exceptions global
@app.exception_handler(Exception)
async def global_exception_handler(request: Request, exc: Exception):
    """Gestionnaire global des exceptions"""
    logger.error("Exception non g√©r√©e", 
                path=request.url.path,
                method=request.method,
                error=str(exc),
                user_agent=request.headers.get("user-agent"))
    
    return JSONResponse(
        status_code=500,
        content={
            "error": "Erreur interne du serveur",
            "message": "Une erreur inattendue s'est produite",
            "timestamp": datetime.utcnow().isoformat(),
            "path": request.url.path,
            "request_id": id(request)
        }
    )

# Routes de base
@app.get("/")
async def root():
    """Point d'entr√©e principal de l'API KanterMator"""
    return {
        "message": "ü§ñ KanterMator API - Agent d'automatisation √©ducative",
        "description": "Automatisation Google Workspace pour l'√©ducation",
        "version": settings.VERSION,
        "environment": settings.ENVIRONMENT,
        "status": "active",
        "automation_enabled": settings.AUTOMATION_ENABLED,
        "docs_url": "/docs",
        "timestamp": datetime.utcnow().isoformat(),
        "features": {
            "progressions": "Gestion des progressions p√©dagogiques",
            "automation": "Automatisation hebdomadaire programm√©e",
            "drive_management": "Cr√©ation de dossiers et raccourcis",
            "google_sheets": "Synchronisation avec Google Sheets",
            "monitoring": "Monitoring et validation syst√®me"
        }
    }

@app.get("/health")
async def health_check():
    """V√©rification de sant√© de l'application"""
    try:
        # Test de base de donn√©es
        db_healthy = db_manager.health_check()
        
        return {
            "status": "healthy" if db_healthy else "degraded",
            "timestamp": datetime.utcnow().isoformat(),
            "service": "kantermator-api",
            "version": settings.VERSION,
            "checks": {
                "database": "ok" if db_healthy else "error",
                "api": "ok"
            }
        }
    except Exception as e:
        logger.error("Erreur lors du health check", error=str(e))
        return JSONResponse(
            status_code=503,
            content={
                "status": "unhealthy",
                "timestamp": datetime.utcnow().isoformat(),
                "service": "kantermator-api",
                "error": str(e)
            }
        )

@app.get("/info")
async def app_info():
    """Informations d√©taill√©es sur l'application"""
    return {
        "name": settings.APP_NAME,
        "version": settings.VERSION,
        "environment": settings.ENVIRONMENT,
        "automation": {
            "enabled": settings.AUTOMATION_ENABLED,
            "schedule": settings.AUTOMATION_SCHEDULE,
            "timezone": settings.AUTOMATION_TIMEZONE
        },
        "google_workspace": {
            "sheets_configured": bool(settings.GOOGLE_SHEETS_ID),
            "drive_folders_configured": bool(settings.DRIVE_CAHIER_JOURNAL_ID and settings.DRIVE_ARCHIVE_ID)
        },
        "subjects": settings.SUBJECTS,
        "school_year": {
            "start": settings.SCHOOL_YEAR_START,
            "end": settings.SCHOOL_YEAR_END
        }
    }

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(
        "app.main:app", 
        host="0.0.0.0", 
        port=8000,
        reload=settings.ENVIRONMENT == "development",
        log_level=settings.LOG_LEVEL.lower()
    )
