"""
üöÄ Application principale KanterMator
Phase 2.6 - Application FastAPI compl√®te

Agent d'automatisation Google Workspace pour l'√©ducation
Gestion intelligente des progressions p√©dagogiques
"""

from fastapi import FastAPI, Request
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import JSONResponse
from contextlib import asynccontextmanager
import structlog
from datetime import datetime

from app.utils.config import settings
from app.utils.database import init_database, db_manager
from app.routers import (
    progressions_router, 
    automation_router, 
    drive_router, 
    system_router
)

# Configuration structlog
structlog.configure(
    processors=[
        structlog.stdlib.filter_by_level,
        structlog.stdlib.add_logger_name,
        structlog.stdlib.add_log_level,
        structlog.stdlib.PositionalArgumentsFormatter(),
        structlog.processors.TimeStamper(fmt="iso"),
        structlog.dev.ConsoleRenderer()
    ],
    context_class=dict,
    logger_factory=structlog.stdlib.LoggerFactory(),
    wrapper_class=structlog.stdlib.BoundLogger,
    cache_logger_on_first_use=True,
)

logger = structlog.get_logger(__name__)

@asynccontextmanager
async def lifespan(app: FastAPI):
    """Gestionnaire de cycle de vie de l'application"""
    # D√©marrage
    logger.info("üöÄ D√©marrage de KanterMator", 
               version=settings.VERSION,
               environment=settings.ENVIRONMENT)
    
    try:
        # Initialisation de la base de donn√©es
        init_database()
        logger.info("‚úÖ Base de donn√©es initialis√©e")
        
        # Test de connexion aux services Google
        try:
            from app.services.google_auth import GoogleAuthService
            auth_service = GoogleAuthService()
            credentials = auth_service.get_credentials()
            logger.info("‚úÖ Authentification Google valid√©e")
        except Exception as e:
            logger.warning("‚ö†Ô∏è Probl√®me d'authentification Google", error=str(e))
        
        # Test de connexion Redis (pour Celery)
        try:
            import redis
            r = redis.from_url(settings.REDIS_URL)
            r.ping()
            logger.info("‚úÖ Connexion Redis valid√©e")
        except Exception as e:
            logger.warning("‚ö†Ô∏è Probl√®me de connexion Redis", error=str(e))
            
    except Exception as e:
        logger.error("‚ùå Erreur lors de l'initialisation", error=str(e))
        raise
    
    yield
    
    # Arr√™t
    logger.info("‚èπÔ∏è Arr√™t de KanterMator")

# Cr√©ation de l'application FastAPI
app = FastAPI(
    title="KanterMator API",
    description="""
    ü§ñ **Agent d'automatisation Google Workspace pour l'√©ducation**
    
    KanterMator automatise la cr√©ation de dossiers hebdomadaires, 
    la gestion des raccourcis et l'organisation p√©dagogique dans Google Drive
    √† partir des progressions d√©finies dans Google Sheets.
    
    ## Fonctionnalit√©s
    
    - üìä **Progressions** : Synchronisation depuis Google Sheets
    - ü§ñ **Automatisation** : Planification et ex√©cution des t√¢ches
    - ÔøΩ **Google Drive** : Gestion des dossiers et raccourcis
    - üîß **Syst√®me** : Monitoring et validation des int√©grations
    
    ## Workflow
    
    1. Lecture des progressions hebdomadaires dans Google Sheets
    2. Automatisation programm√©e (samedi soir par d√©faut)
    3. Cr√©ation de la structure de dossiers dans Google Drive
    4. G√©n√©ration des raccourcis vers les ressources communes
    5. Archivage automatique des anciennes semaines
    """,
    version=settings.VERSION,
    lifespan=lifespan,
    docs_url="/docs",
    redoc_url="/redoc"
)

# Configuration CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=settings.ALLOWED_ORIGINS,
    allow_credentials=True,
    allow_methods=["GET", "POST", "PUT", "DELETE"],
    allow_headers=["*"],
)

# Inclusion des routeurs
app.include_router(progressions_router, prefix="/api/v1")
app.include_router(automation_router, prefix="/api/v1")
app.include_router(drive_router, prefix="/api/v1")
app.include_router(system_router, prefix="/api/v1")
    """,
    version="1.0.0",
    docs_url="/docs",
    redoc_url="/redoc"
)

# Configuration CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["http://localhost:3000", "https://your-domain.com"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Inclusion des routers
app.include_router(automation.router, prefix="/api/v1/automation", tags=["ü§ñ Automatisation"])
app.include_router(sheets.router, prefix="/api/v1/sheets", tags=["üìä Google Sheets"])
app.include_router(drive.router, prefix="/api/v1/drive", tags=["üóÇÔ∏è Google Drive"])
app.include_router(monitoring.router, prefix="/api/v1/monitoring", tags=["üìà Monitoring"])

@app.on_event("startup")
async def startup_event():
    """Initialisation au d√©marrage de l'application"""
    logger.info("üöÄ KanterMator API d√©marrage", 
                version="1.0.0", 
                environment=settings.ENVIRONMENT)
    
    # Test de connexion Google Workspace
    try:
        auth_service = GoogleAuthService()
        await auth_service.verify_credentials()
        logger.info("‚úÖ Connexion Google Workspace valid√©e")
    except Exception as e:
        logger.error("‚ùå Erreur connexion Google Workspace", error=str(e))

@app.on_event("shutdown")
async def shutdown_event():
    """Nettoyage √† l'arr√™t de l'application"""
    logger.info("üõë KanterMator API arr√™t")

@app.get("/")
async def root():
    """Point d'entr√©e principal de l'API"""
    return {
        "message": "ü§ñ KanterMator API - Pr√©parateur automatique de semaines p√©dagogiques",
        "version": "1.0.0",
        "status": "operational",
        "timestamp": datetime.now().isoformat(),
        "docs": "/docs",
        "health": "/api/v1/monitoring/health"
    }

@app.get("/health")
async def health_check():
    """V√©rification de sant√© de l'application"""
    try:
        # Test connexion base de donn√©es
        # Test connexion Google APIs
        # Test √©tat des services
        
        return {
            "status": "healthy",
            "timestamp": datetime.now().isoformat(),
            "services": {
                "database": "‚úÖ Connected",
                "google_apis": "‚úÖ Connected", 
                "redis": "‚úÖ Connected"
            }
        }
    except Exception as e:
        logger.error("‚ùå Health check failed", error=str(e))
        raise HTTPException(status_code=503, detail="Service unavailable")

@app.exception_handler(Exception)
async def global_exception_handler(request, exc):
    """Gestionnaire global d'exceptions"""
    logger.error("‚ùå Erreur non g√©r√©e", 
                 path=str(request.url.path),
                 method=request.method,
                 error=str(exc))
    
    return JSONResponse(
        status_code=500,
        content={
            "error": "Erreur interne du serveur",
            "message": "Une erreur inattendue s'est produite",
            "timestamp": datetime.now().isoformat()
        }
    )

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000, reload=True)
