"""
ü§ñ Routeurs API pour l'agent Sylvie
Phase 3.3 - Interface REST pour Sylvie

Endpoints pour interagir avec l'agent conversationnel Sylvie
"""

from datetime import datetime
from typing import List, Optional
from fastapi import APIRouter, HTTPException, BackgroundTasks
from pydantic import BaseModel, Field
import structlog

from app.services.sylvie_agent import sylvie
from app.services.sylvie_config import SylvieResponse, ConversationMessage
from app.services.hybrid_ai import hybrid_ai

logger = structlog.get_logger(__name__)

# Mod√®les Pydantic pour l'API Sylvie
class ChatMessage(BaseModel):
    """Message de chat avec Sylvie"""
    message: str = Field(..., min_length=1, max_length=2000, description="Message pour Sylvie")
    conversation_id: Optional[str] = Field(None, description="ID de conversation (optionnel)")

class ChatResponse(BaseModel):
    """R√©ponse de chat de Sylvie"""
    response: str
    conversation_id: str
    action_taken: Optional[str] = None
    action_result: Optional[dict] = None
    suggestions: List[str] = []
    needs_confirmation: bool = False
    timestamp: datetime = Field(default_factory=datetime.utcnow)

class ConversationHistoryResponse(BaseModel):
    """Historique d'une conversation"""
    conversation_id: str
    messages: List[dict]
    total_messages: int
    created_at: Optional[datetime] = None

class SylvieCapabilitiesResponse(BaseModel):
    """Capacit√©s de Sylvie"""
    capabilities: List[dict]
    examples: List[dict]
    help_text: str

# Router Sylvie
sylvie_router = APIRouter(prefix="/sylvie", tags=["ü§ñ Agent Sylvie"])

@sylvie_router.post("/chat", response_model=ChatResponse)
async def chat_with_sylvie(request: ChatMessage, background_tasks: BackgroundTasks):
    """
    Conversation avec l'agent Sylvie
    
    Envoyez un message √† Sylvie et recevez une r√©ponse intelligente
    avec des actions automatiques si n√©cessaire.
    """
    try:
        logger.info("üí¨ Nouveau message pour Sylvie", 
                   message_preview=request.message[:50],
                   conversation_id=request.conversation_id)
        
        # Traitement du message par Sylvie
        sylvie_response = await sylvie.process_message(
            message=request.message,
            conversation_id=request.conversation_id
        )
        
        # Conversion en r√©ponse API
        response = ChatResponse(
            response=sylvie_response.message,
            conversation_id=sylvie_response.conversation_id,
            action_taken=sylvie_response.action_taken,
            action_result=sylvie_response.action_result,
            suggestions=sylvie_response.suggestions,
            needs_confirmation=sylvie_response.needs_user_confirmation
        )
        
        logger.info("‚úÖ Sylvie a r√©pondu", 
                   conversation_id=response.conversation_id,
                   action_taken=response.action_taken)
        
        return response
        
    except Exception as e:
        logger.error("‚ùå Erreur lors du chat avec Sylvie", error=str(e))
        raise HTTPException(
            status_code=500, 
            detail=f"Erreur lors de la communication avec Sylvie: {str(e)}"
        )

@sylvie_router.get("/capabilities", response_model=SylvieCapabilitiesResponse)
async def get_sylvie_capabilities():
    """
    R√©cup√©ration des capacit√©s de Sylvie
    
    D√©couvrez tout ce que Sylvie peut faire pour vous aider
    avec KanterMator.
    """
    try:
        capabilities = [
            {
                "name": "Contr√¥le d'automatisation",
                "description": "Lance, programme et surveille l'automatisation hebdomadaire",
                "examples": ["Lance l'automatisation pour cette semaine", "Quel est l'√©tat de l'automatisation ?"]
            },
            {
                "name": "Analyse des progressions",
                "description": "V√©rifie et analyse vos progressions Google Sheets",
                "examples": ["Analyse mes progressions", "Y a-t-il des erreurs dans mes progressions ?"]
            },
            {
                "name": "Gestion Google Drive",
                "description": "G√®re les dossiers, raccourcis et archivage",
                "examples": ["V√©rifie l'espace Google Drive", "Archive les anciennes semaines"]
            },
            {
                "name": "Monitoring syst√®me",
                "description": "Surveille l'√©tat de tous les composants",
                "examples": ["Comment va le syst√®me ?", "V√©rifie les int√©grations Google"]
            },
            {
                "name": "Aide et guidance",
                "description": "Guide et explique les fonctionnalit√©s",
                "examples": ["Comment √ßa marche ?", "Que peux-tu faire ?"]
            },
            {
                "name": "R√©solution d'erreurs",
                "description": "D√©tecte et r√©sout automatiquement les probl√®mes",
                "examples": ["Il y a un probl√®me", "R√©pare les connexions Google"]
            }
        ]
        
        examples = [
            {"message": "Lance l'automatisation pour la semaine 32", "category": "Automatisation"},
            {"message": "V√©rifie mes progressions Google Sheets", "category": "Analyse"},
            {"message": "Comment va le syst√®me ?", "category": "Monitoring"},
            {"message": "Que peux-tu faire pour moi ?", "category": "Aide"},
            {"message": "Archive les dossiers de plus de 4 semaines", "category": "Drive"},
            {"message": "Il y a une erreur avec Google Sheets", "category": "R√©solution"}
        ]
        
        help_text = """
        ü§ñ **Sylvie, votre assistante IA pour KanterMator**
        
        Je peux vous aider √† :
        ‚Ä¢ Automatiser la cr√©ation de vos dossiers hebdomadaires
        ‚Ä¢ Analyser et valider vos progressions p√©dagogiques  
        ‚Ä¢ G√©rer votre organisation Google Drive
        ‚Ä¢ Surveiller l'√©tat du syst√®me
        ‚Ä¢ R√©soudre les probl√®mes automatiquement
        ‚Ä¢ Vous guider dans l'utilisation de KanterMator
        
        Parlez-moi naturellement, comme √† une coll√®gue ! üòä
        """
        
        return SylvieCapabilitiesResponse(
            capabilities=capabilities,
            examples=examples,
            help_text=help_text
        )
        
    except Exception as e:
        logger.error("‚ùå Erreur lors de la r√©cup√©ration des capacit√©s", error=str(e))
        raise HTTPException(status_code=500, detail="Erreur lors de la r√©cup√©ration des capacit√©s")

@sylvie_router.get("/conversations/{conversation_id}", response_model=ConversationHistoryResponse)
async def get_conversation_history(conversation_id: str):
    """
    R√©cup√©ration de l'historique d'une conversation
    
    Consultez l'historique complet de vos √©changes avec Sylvie.
    """
    try:
        messages = sylvie.get_conversation_history(conversation_id)
        
        if not messages:
            raise HTTPException(status_code=404, detail="Conversation non trouv√©e")
        
        # Conversion des messages pour l'API
        api_messages = []
        for msg in messages:
            api_messages.append({
                "role": msg.role.value,
                "content": msg.content,
                "timestamp": msg.timestamp.isoformat(),
                "metadata": msg.metadata
            })
        
        return ConversationHistoryResponse(
            conversation_id=conversation_id,
            messages=api_messages,
            total_messages=len(api_messages),
            created_at=messages[0].timestamp if messages else None
        )
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error("‚ùå Erreur lors de la r√©cup√©ration de l'historique", 
                    conversation_id=conversation_id, 
                    error=str(e))
        raise HTTPException(status_code=500, detail="Erreur lors de la r√©cup√©ration de l'historique")

@sylvie_router.delete("/conversations/{conversation_id}")
async def clear_conversation(conversation_id: str):
    """
    Nettoyage d'une conversation
    
    Supprime l'historique d'une conversation avec Sylvie.
    """
    try:
        sylvie.clear_conversation(conversation_id)
        
        return {
            "message": f"Conversation {conversation_id} nettoy√©e avec succ√®s",
            "timestamp": datetime.utcnow().isoformat()
        }
        
    except Exception as e:
        logger.error("‚ùå Erreur lors du nettoyage de conversation", 
                    conversation_id=conversation_id, 
                    error=str(e))
        raise HTTPException(status_code=500, detail="Erreur lors du nettoyage")

@sylvie_router.post("/quick-actions/{action_name}")
async def execute_quick_action(action_name: str, background_tasks: BackgroundTasks):
    """
    Ex√©cution d'actions rapides pr√©d√©finies
    
    Actions disponibles :
    - system-status : V√©rification compl√®te du syst√®me
    - analyze-progressions : Analyse des progressions Google Sheets
    - automation-status : √âtat de l'automatisation
    - help : Aide et capacit√©s de Sylvie
    """
    try:
        # Mapping des actions rapides vers des messages
        quick_actions = {
            "system-status": "V√©rifie l'√©tat complet du syst√®me",
            "analyze-progressions": "Analyse mes progressions Google Sheets", 
            "automation-status": "Quel est l'√©tat de l'automatisation ?",
            "help": "Que peux-tu faire pour moi ?"
        }
        
        if action_name not in quick_actions:
            raise HTTPException(
                status_code=400, 
                detail=f"Action '{action_name}' non disponible. Actions : {list(quick_actions.keys())}"
            )
        
        # Ex√©cution de l'action via Sylvie
        message = quick_actions[action_name]
        sylvie_response = await sylvie.process_message(message)
        
        return {
            "action": action_name,
            "response": sylvie_response.message,
            "action_taken": sylvie_response.action_taken,
            "action_result": sylvie_response.action_result,
            "timestamp": datetime.utcnow().isoformat()
        }
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error("‚ùå Erreur lors de l'action rapide", action=action_name, error=str(e))
        raise HTTPException(status_code=500, detail=f"Erreur lors de l'ex√©cution de {action_name}")

# Messages de d√©monstration pour les tests
@sylvie_router.get("/demo-messages")
async def get_demo_messages():
    """Messages de d√©monstration pour tester Sylvie"""
    return {
        "demo_messages": [
            "Bonjour Sylvie ! Comment vas-tu ?",
            "Lance l'automatisation pour la semaine prochaine",
            "V√©rifie mes progressions Google Sheets",
            "Y a-t-il des erreurs dans le syst√®me ?",
            "Que peux-tu faire pour m'aider ?",
            "Archive les dossiers de plus de 4 semaines",
            "Quel est l'√©tat de Google Drive ?",
            "Aide-moi √† configurer KanterMator",
            "Il y a un probl√®me avec l'authentification Google",
            "Merci Sylvie, tu es formidable !"
        ],
        "usage_tips": [
            "Parlez √† Sylvie naturellement, comme √† une coll√®gue",
            "Utilisez les actions rapides pour les t√¢ches courantes", 
            "Sylvie peut ex√©cuter plusieurs actions automatiquement",
            "Le syst√®me hybride GPT+Gemini optimise chaque r√©ponse"
        ],
        "ai_info": {
            "hybrid_system": True,
            "models": ["OpenAI GPT", "Google Gemini"],
            "strategy": hybrid_ai.get_service_status()
        }
    }

@sylvie_router.get("/ai-status")
async def get_ai_status():
    """√âtat du syst√®me IA hybride"""
    try:
        return {
            "status": "active",
            "hybrid_ai": hybrid_ai.get_service_status(),
            "timestamp": datetime.utcnow().isoformat()
        }
    except Exception as e:
        logger.error("‚ùå Erreur r√©cup√©ration statut IA", error=str(e))
        raise HTTPException(status_code=500, detail="Erreur statut IA")

@sylvie_router.post("/ai-compare")
async def compare_ai_models(request: ChatMessage):
    """Compare les r√©ponses GPT vs Gemini (pour debug)"""
    try:
        if len(request.message) > 200:
            raise HTTPException(status_code=400, detail="Message trop long pour comparaison")
        
        responses = await hybrid_ai.compare_responses(request.message)
        
        return {
            "message": request.message,
            "responses": {
                model: {
                    "content": resp.content,
                    "model": resp.model,
                    "metadata": resp.metadata
                } for model, resp in responses.items()
            },
            "timestamp": datetime.utcnow().isoformat()
        }
        
    except Exception as e:
        logger.error("‚ùå Erreur comparaison IA", error=str(e))
        raise HTTPException(status_code=500, detail=f"Erreur comparaison: {str(e)}")
