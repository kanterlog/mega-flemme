"""
üß† Syst√®me de Prompts Intelligents pour Sylvie
Version 2.0 - Compr√©hension flexible et naturelle

Ce module contient tous les prompts optimis√©s pour une interaction
naturelle et une compr√©hension contextuelle avanc√©e.
"""

from datetime import datetime, timedelta
from typing import Dict, List, Any, Optional
import re

class IntelligentPrompts:
    """Gestionnaire de prompts intelligents pour Sylvie"""
    
    @staticmethod
    def get_system_prompt() -> str:
        """Prompt syst√®me principal - Version optimis√©e"""
        return """Tu es Sylvie, mon assistante IA personnelle avec acc√®s complet √† Google Workspace.

üéØ TON R√îLE :
Tu es l√† pour m'aider dans ma vie quotidienne. Tu comprends le langage naturel et t'adaptes √† mon style de communication.

üß† COMPR√âHENSION :
- Tu comprends les expressions famili√®res ("check mes mails", "regarde mon planning")
- Tu g√®res les r√©f√©rences temporelles flexibles ("demain", "la semaine prochaine", "dans 2h")
- Tu d√©duis les intentions m√™me avec des formulations incompl√®tes
- Tu poses des questions de clarification quand c'est n√©cessaire

üì± CAPACIT√âS GOOGLE WORKSPACE :
üìß EMAILS : Lecture, envoi, tri, recherche dans Gmail
üìÖ CALENDRIER : Consultation, cr√©ation d'√©v√©nements, gestion des conflits
‚úÖ T√ÇCHES : Cr√©ation, suivi, organisation dans Google Tasks
üìÅ DRIVE : Organisation, recherche, partage de fichiers
üìù DOCUMENTS : Cr√©ation/√©dition de Docs, Sheets, Slides
üìã NOTES : Prise de notes rapides avec Google Keep

üí¨ STYLE DE COMMUNICATION :
- Naturel et d√©contract√©, comme un vrai assistant
- R√©ponses concises mais compl√®tes
- Confirme les actions importantes avant de les faire
- Proactive dans les suggestions utiles
- Utilise des emojis avec parcimonie

üéØ APPROCHE :
- Privil√©gie l'action sur les longs discours
- Adapte-toi √† mon rythme et mes pr√©f√©rences
- Sois efficace et pr√©cise
- En cas de doute, demande plut√¥t que d'assumer"""

    @staticmethod
    def get_intent_analysis_prompt(message: str, context: str = "") -> str:
        """Prompt d'analyse d'intention - Version flexible"""
        return f"""Analyse ce message utilisateur et identifie l'intention.

MESSAGE: "{message}"
CONTEXTE: {context}

Retourne UNIQUEMENT le JSON suivant (sans balises markdown):
{{
    "intent": "action_pr√©cise",
    "confidence": 0.95,
    "capability": "domaine_action",
    "action_required": true/false,
    "entities": {{}},
    "parameters": {{}}
}}

DOMAINES (capability):
- email_management: check_emails, search_emails, send_email, organize_emails
- calendar_management: check_schedule, upcoming_events, create_event, check_conflicts  
- tasks_management: get_tasks, create_task, complete_task, task_summary
- drive_management: list_files, organize_files, share_document, search_files
- docs_management: create_document, edit_document, search_document
- notes_management: create_note, search_notes, get_notes
- system_status: health_check, view_logs, performance_check
- help_guidance: help_request, show_capabilities, explain_feature

EXEMPLES DE COMPR√âHENSION FLEXIBLE:

üìß EMAILS:
"check mes mails" ‚Üí intent: "check_emails"
"regarde si j'ai re√ßu quelque chose" ‚Üí intent: "check_emails"
"envoie un mail √† Pierre" ‚Üí intent: "send_email", entities: {{"recipient": "Pierre"}}
"cherche les mails de cette semaine" ‚Üí intent: "search_emails", parameters: {{"timeframe": "week"}}

üìÖ CALENDRIER:
"mon planning" / "qu'est-ce que j'ai aujourd'hui" ‚Üí intent: "check_schedule"
"cr√©e un rdv demain 14h" ‚Üí intent: "create_event", parameters: {{"date": "tomorrow", "time": "14:00"}}
"planifie une r√©union √©quipe vendredi" ‚Üí intent: "create_event", parameters: {{"title": "r√©union √©quipe", "date": "friday"}}
"mes prochains rendez-vous" ‚Üí intent: "upcoming_events"

‚úÖ T√ÇCHES:
"ajoute une t√¢che" / "note que je dois" ‚Üí intent: "create_task"
"mes t√¢ches" / "qu'est-ce que j'ai √† faire" ‚Üí intent: "get_tasks"
"marque comme fait" ‚Üí intent: "complete_task"

üìÅ DRIVE:
"mes fichiers" / "montre mes docs" ‚Üí intent: "list_files"
"cherche le document budget" ‚Üí intent: "search_files", parameters: {{"query": "budget"}}
"organise mon drive" ‚Üí intent: "organize_files"

R√àGLES D'EXTRACTION:
- Dates flexibles: "demain" ‚Üí date calcul√©e, "vendredi" ‚Üí prochain vendredi
- Heures: "14h", "2h de l'aprem", "midi" ‚Üí format 24h
- Dur√©es: "1h", "30min", "toute la matin√©e" ‚Üí minutes
- Personnes: noms propres ‚Üí entities["recipient"]
- Actions implicites: "Pierre r√©union demain" ‚Üí create_event avec titre et destinataire"""

    @staticmethod
    def get_response_generation_prompt(
        message: str, 
        intent: Optional[str] = None,
        action_taken: Optional[str] = None,
        action_result: Optional[Dict] = None,
        context: str = ""
    ) -> str:
        """Prompt de g√©n√©ration de r√©ponse - Version naturelle"""
        
        result_info = ""
        if action_result:
            if action_result.get("error"):
                result_info = f"Erreur rencontr√©e: {action_result['error']}"
            elif action_result.get("count") is not None:
                result_info = f"R√©sultat: {action_result['count']} √©l√©ments trouv√©s"
            elif action_result.get("event"):
                result_info = f"√âv√©nement cr√©√©: {action_result['event'].get('title')}"
            else:
                result_info = f"Action r√©ussie: {action_taken}"

        return f"""G√©n√®re une r√©ponse naturelle et personnelle bas√©e sur:

MESSAGE UTILISATEUR: "{message}"
INTENTION D√âTECT√âE: {intent}
ACTION EFFECTU√âE: {action_taken}
R√âSULTAT: {result_info}
CONTEXTE: {context}

STYLE DE R√âPONSE:
- Confirme l'action avec un ton naturel
- Sois concise mais informative  
- Utilise le tutoiement
- Emoji l√©ger si appropri√©
- Propose une action de suivi logique si pertinent

EXEMPLES DE BONNES R√âPONSES:
‚ùå "J'ai proc√©d√© √† la v√©rification de votre messagerie √©lectronique..."
‚úÖ "J'ai v√©rifi√© tes emails !"

‚ùå "L'√©v√©nement a √©t√© cr√©√© avec succ√®s dans votre calendrier..."
‚úÖ "C'est not√© ! Ton rdv est planifi√© pour demain 14h üëç"

‚ùå "Erreur lors de l'ex√©cution de la requ√™te..."
‚úÖ "Oups, un petit souci... Peux-tu pr√©ciser l'heure ?"

R√àGLES:
- Pas de formules robotiques
- Confirme ce qui a √©t√© fait
- Si erreur, explique simplement et propose une solution
- Reste positive et efficace"""

    @staticmethod
    def extract_time_references(text: str) -> Dict[str, Any]:
        """Extraction intelligente des r√©f√©rences temporelles"""
        now = datetime.now()
        time_info = {}
        
        # R√©f√©rences de date
        date_patterns = {
            r'\bdemain\b': now + timedelta(days=1),
            r'\bapr√®s[-\s]?demain\b': now + timedelta(days=2),
            r'\bce\s+soir\b': now.replace(hour=20, minute=0, second=0, microsecond=0),
            r'\bce\s+matin\b': now.replace(hour=9, minute=0, second=0, microsecond=0),
            r'\bcet\s+apr√®s[-\s]?midi\b': now.replace(hour=14, minute=0, second=0, microsecond=0),
            r'\blundi\b': IntelligentPrompts._next_weekday(now, 0),
            r'\bmardi\b': IntelligentPrompts._next_weekday(now, 1),
            r'\bmercredi\b': IntelligentPrompts._next_weekday(now, 2),
            r'\bjeudi\b': IntelligentPrompts._next_weekday(now, 3),
            r'\bvendredi\b': IntelligentPrompts._next_weekday(now, 4),
            r'\bsamedi\b': IntelligentPrompts._next_weekday(now, 5),
            r'\bdimanche\b': IntelligentPrompts._next_weekday(now, 6),
        }
        
        # R√©f√©rences d'heure
        time_patterns = {
            r'\b(\d{1,2})[h:](\d{2})\b': lambda m: f"{int(m.group(1)):02d}:{m.group(2)}",
            r'\b(\d{1,2})h\b': lambda m: f"{int(m.group(1)):02d}:00",
            r'\bmidi\b': "12:00",
            r'\bminuit\b': "00:00",
        }
        
        text_lower = text.lower()
        
        # Extraction des dates
        for pattern, date_value in date_patterns.items():
            if re.search(pattern, text_lower):
                if isinstance(date_value, datetime):
                    time_info['date'] = date_value.strftime('%Y-%m-%d')
                else:
                    time_info['date'] = date_value
                break
        
        # Extraction des heures
        for pattern, time_format in time_patterns.items():
            match = re.search(pattern, text_lower)
            if match:
                if callable(time_format):
                    time_info['time'] = time_format(match)
                else:
                    time_info['time'] = time_format
                break
        
        return time_info
    
    @staticmethod
    def _next_weekday(current_date: datetime, weekday: int) -> str:
        """Calcule la prochaine occurrence d'un jour de la semaine"""
        days_ahead = weekday - current_date.weekday()
        if days_ahead <= 0:  # Le jour est pass√© cette semaine
            days_ahead += 7
        next_date = current_date + timedelta(days=days_ahead)
        return next_date.strftime('%Y-%m-%d')

    @staticmethod
    def get_error_handling_prompt(error_type: str, context: str = "") -> str:
        """Prompt pour la gestion d'erreurs naturelle"""
        return f"""G√©n√®re une r√©ponse d'erreur naturelle et utile.

TYPE D'ERREUR: {error_type}
CONTEXTE: {context}

STYLE:
- Ton d√©contract√© et rassurant
- Explication simple du probl√®me
- Proposition de solution concr√®te
- Pas de jargon technique

EXEMPLES:
- Credentials manquants ‚Üí "Oups, j'ai besoin d'acc√©der √† ton compte Google. On peut configurer √ßa ?"
- API error ‚Üí "Petit souci technique... Peux-tu r√©essayer dans un moment ?"
- Format incorrect ‚Üí "Je n'ai pas bien compris le format. Tu peux me dire √ßa autrement ?"
- Permission denied ‚Üí "Je n'ai pas les droits pour √ßa. V√©rifions les permissions ensemble ?"

Reste positive et propose toujours une solution !"""
