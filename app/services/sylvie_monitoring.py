"""
üîç Module de monitoring proactif de Sylvie
Phase 3.4 - Surveillance intelligente

Sylvie surveille le syst√®me et alerte automatiquement
"""

import asyncio
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Any
import structlog
from sqlalchemy.orm import Session

from app.utils.database import db_manager
from app.utils.config import settings
from app.models import AutomationTask, SystemLog
from app.services.google_auth import GoogleAuthService
from app.services.sheets_reader import SheetsReader
from app.services.drive_manager import DriveManager

logger = structlog.get_logger(__name__)

class SylvieMonitor:
    """Syst√®me de monitoring proactif de Sylvie"""
    
    def __init__(self):
        self.monitoring_active = False
        self.alerts_history: List[Dict[str, Any]] = []
        self.last_checks: Dict[str, datetime] = {}
        
    async def start_monitoring(self):
        """D√©marrage du monitoring continu"""
        self.monitoring_active = True
        logger.info("üîç Sylvie commence le monitoring proactif")
        
        while self.monitoring_active:
            try:
                await self._perform_health_checks()
                await asyncio.sleep(300)  # V√©rification toutes les 5 minutes
            except Exception as e:
                logger.error("‚ùå Erreur dans le monitoring Sylvie", error=str(e))
                await asyncio.sleep(60)  # Attente r√©duite en cas d'erreur
    
    def stop_monitoring(self):
        """Arr√™t du monitoring"""
        self.monitoring_active = False
        logger.info("‚èπÔ∏è Sylvie arr√™te le monitoring")
    
    async def _perform_health_checks(self):
        """Ex√©cution des v√©rifications de sant√©"""
        checks = [
            ("database", self._check_database_health),
            ("google_auth", self._check_google_auth),
            ("automation_tasks", self._check_automation_tasks),
            ("system_resources", self._check_system_resources),
            ("error_patterns", self._check_error_patterns)
        ]
        
        for check_name, check_function in checks:
            try:
                await check_function()
                self.last_checks[check_name] = datetime.utcnow()
            except Exception as e:
                await self._create_alert(
                    severity="error",
                    component=check_name,
                    message=f"√âchec de v√©rification {check_name}: {str(e)}",
                    auto_resolve=True
                )
    
    async def _check_database_health(self):
        """V√©rification de la sant√© de la base de donn√©es"""
        try:
            # Test de connexion simple
            healthy = db_manager.health_check()
            
            if not healthy:
                await self._create_alert(
                    severity="critical",
                    component="database",
                    message="Base de donn√©es PostgreSQL inaccessible",
                    auto_resolve=True
                )
                return
            
            # V√©rification des performances
            with db_manager.get_session() as session:
                start_time = datetime.utcnow()
                session.execute("SELECT COUNT(*) FROM automation_tasks")
                query_time = (datetime.utcnow() - start_time).total_seconds()
                
                if query_time > 5.0:  # Plus de 5 secondes
                    await self._create_alert(
                        severity="warning",
                        component="database",
                        message=f"Requ√™te base de donn√©es lente: {query_time:.2f}s",
                        auto_resolve=False
                    )
                    
        except Exception as e:
            await self._create_alert(
                severity="critical",
                component="database",
                message=f"Erreur critique base de donn√©es: {str(e)}",
                auto_resolve=True
            )
    
    async def _check_google_auth(self):
        """V√©rification de l'authentification Google"""
        try:
            auth_service = GoogleAuthService()
            
            # Test d'authentification
            credentials = auth_service.get_credentials()
            
            # Test d'acc√®s Google Sheets
            sheets_reader = SheetsReader()
            validation = sheets_reader.validate_sheets_structure()
            
            if not validation.get("sheets_accessible", False):
                await self._create_alert(
                    severity="error",
                    component="google_sheets",
                    message="Google Sheets inaccessible - V√©rification des permissions n√©cessaire",
                    auto_resolve=True
                )
            
            # Test d'acc√®s Google Drive
            drive_manager = DriveManager()
            drive_validation = drive_manager.validate_drive_access()
            
            if not drive_validation.get("drive_accessible", False):
                await self._create_alert(
                    severity="error", 
                    component="google_drive",
                    message="Google Drive inaccessible - V√©rification des permissions n√©cessaire",
                    auto_resolve=True
                )
                
        except Exception as e:
            await self._create_alert(
                severity="critical",
                component="google_auth",
                message=f"√âchec authentification Google: {str(e)}",
                auto_resolve=True
            )
    
    async def _check_automation_tasks(self):
        """Surveillance des t√¢ches d'automatisation"""
        try:
            with db_manager.get_session() as session:
                # T√¢ches bloqu√©es (en cours depuis plus de 2h)
                stuck_threshold = datetime.utcnow() - timedelta(hours=2)
                stuck_tasks = session.query(AutomationTask).filter(
                    AutomationTask.status == 'running',
                    AutomationTask.started_at < stuck_threshold
                ).all()
                
                for task in stuck_tasks:
                    await self._create_alert(
                        severity="warning",
                        component="automation",
                        message=f"T√¢che bloqu√©e depuis 2h: {task.task_type} (ID: {task.id})",
                        auto_resolve=True,
                        metadata={"task_id": task.id, "task_type": task.task_type}
                    )
                
                # T√¢ches √©chou√©es r√©centes
                recent_threshold = datetime.utcnow() - timedelta(hours=24)
                failed_tasks = session.query(AutomationTask).filter(
                    AutomationTask.status == 'failed',
                    AutomationTask.created_at > recent_threshold
                ).count()
                
                if failed_tasks > 3:  # Plus de 3 √©checs en 24h
                    await self._create_alert(
                        severity="warning",
                        component="automation",
                        message=f"{failed_tasks} t√¢ches √©chou√©es dans les derni√®res 24h",
                        auto_resolve=False
                    )
                    
        except Exception as e:
            logger.error("‚ùå Erreur lors de la v√©rification des t√¢ches", error=str(e))
    
    async def _check_system_resources(self):
        """V√©rification des ressources syst√®me"""
        try:
            # V√©rification de l'espace Google Drive
            drive_manager = DriveManager()
            storage_info = drive_manager.get_drive_space_info()
            
            if storage_info.get("usage_percentage", 0) > 85:
                await self._create_alert(
                    severity="warning",
                    component="google_drive",
                    message=f"Espace Google Drive bient√¥t plein: {storage_info.get('usage_percentage', 0):.1f}%",
                    auto_resolve=False
                )
            
            # V√©rification de l'historique des conversations Sylvie
            # (√Ä impl√©menter selon les besoins)
            
        except Exception as e:
            logger.warning("‚ö†Ô∏è Erreur lors de la v√©rification des ressources", error=str(e))
    
    async def _check_error_patterns(self):
        """D√©tection de patterns d'erreurs r√©p√©titives"""
        try:
            # Analyse des logs syst√®me r√©cents
            recent_threshold = datetime.utcnow() - timedelta(hours=1)
            
            with db_manager.get_session() as session:
                error_logs = session.query(SystemLog).filter(
                    SystemLog.level == 'ERROR',
                    SystemLog.timestamp > recent_threshold
                ).all()
                
                # Groupement par composant
                error_counts = {}
                for log in error_logs:
                    component = log.component
                    error_counts[component] = error_counts.get(component, 0) + 1
                
                # Alerte si plus de 5 erreurs par composant en 1h
                for component, count in error_counts.items():
                    if count > 5:
                        await self._create_alert(
                            severity="warning",
                            component=component,
                            message=f"Erreurs r√©p√©titives d√©tect√©es: {count} erreurs en 1h",
                            auto_resolve=True,
                            metadata={"error_count": count, "timeframe": "1h"}
                        )
                        
        except Exception as e:
            logger.warning("‚ö†Ô∏è Erreur lors de l'analyse des patterns", error=str(e))
    
    async def _create_alert(self, severity: str, component: str, message: str, 
                          auto_resolve: bool = False, metadata: Dict[str, Any] = None):
        """Cr√©ation d'une alerte de monitoring"""
        
        alert = {
            "id": len(self.alerts_history) + 1,
            "severity": severity,
            "component": component, 
            "message": message,
            "timestamp": datetime.utcnow(),
            "auto_resolve": auto_resolve,
            "resolved": False,
            "metadata": metadata or {}
        }
        
        self.alerts_history.append(alert)
        
        # Log selon la s√©v√©rit√©
        if severity == "critical":
            logger.error("üö® ALERTE CRITIQUE", **alert)
        elif severity == "error":
            logger.error("‚ùå ALERTE ERREUR", **alert)
        elif severity == "warning":
            logger.warning("‚ö†Ô∏è ALERTE AVERTISSEMENT", **alert)
        else:
            logger.info("‚ÑπÔ∏è ALERTE INFO", **alert)
        
        # R√©solution automatique si activ√©e
        if auto_resolve:
            await self._attempt_auto_resolution(alert)
    
    async def _attempt_auto_resolution(self, alert: Dict[str, Any]):
        """Tentative de r√©solution automatique d'une alerte"""
        
        component = alert["component"]
        
        try:
            if component == "google_auth":
                # Tentative de reconnexion Google
                auth_service = GoogleAuthService()
                credentials = auth_service.get_credentials()
                
                if credentials:
                    alert["resolved"] = True
                    alert["resolution"] = "Reconnexion Google r√©ussie"
                    logger.info("‚úÖ R√©solution auto: Reconnexion Google")
            
            elif component == "database":
                # Test de reconnexion base de donn√©es
                if db_manager.health_check():
                    alert["resolved"] = True
                    alert["resolution"] = "Base de donn√©es accessible"
                    logger.info("‚úÖ R√©solution auto: Base de donn√©es OK")
            
            elif component == "automation":
                # Nettoyage des t√¢ches bloqu√©es
                task_id = alert.get("metadata", {}).get("task_id")
                if task_id:
                    with db_manager.get_session() as session:
                        task = session.query(AutomationTask).filter(AutomationTask.id == task_id).first()
                        if task and task.status == 'running':
                            task.status = 'failed'
                            task.error_message = "T√¢che bloqu√©e - arr√™t√©e automatiquement par Sylvie"
                            task.completed_at = datetime.utcnow()
                            session.commit()
                            
                            alert["resolved"] = True
                            alert["resolution"] = f"T√¢che {task_id} arr√™t√©e automatiquement"
                            logger.info("‚úÖ R√©solution auto: T√¢che bloqu√©e arr√™t√©e", task_id=task_id)
                            
        except Exception as e:
            logger.error("‚ùå √âchec r√©solution automatique", alert_id=alert["id"], error=str(e))
    
    def get_active_alerts(self) -> List[Dict[str, Any]]:
        """R√©cup√©ration des alertes actives"""
        return [alert for alert in self.alerts_history if not alert.get("resolved", False)]
    
    def get_alerts_summary(self) -> Dict[str, Any]:
        """R√©sum√© des alertes"""
        active_alerts = self.get_active_alerts()
        
        summary = {
            "total_alerts": len(self.alerts_history),
            "active_alerts": len(active_alerts),
            "resolved_alerts": len(self.alerts_history) - len(active_alerts),
            "by_severity": {},
            "by_component": {},
            "last_check": max(self.last_checks.values()) if self.last_checks else None,
            "monitoring_active": self.monitoring_active
        }
        
        # Comptage par s√©v√©rit√©
        for alert in active_alerts:
            severity = alert["severity"]
            summary["by_severity"][severity] = summary["by_severity"].get(severity, 0) + 1
        
        # Comptage par composant
        for alert in active_alerts:
            component = alert["component"]
            summary["by_component"][component] = summary["by_component"].get(component, 0) + 1
        
        return summary
    
    def clear_resolved_alerts(self):
        """Nettoyage des alertes r√©solues anciennes"""
        cutoff_date = datetime.utcnow() - timedelta(days=7)
        
        self.alerts_history = [
            alert for alert in self.alerts_history
            if not alert.get("resolved", False) or alert["timestamp"] > cutoff_date
        ]
        
        logger.info("üßπ Nettoyage des alertes r√©solues anciennes")

# Instance globale du monitoring Sylvie
sylvie_monitor = SylvieMonitor()
