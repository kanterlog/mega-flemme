"""
üìä Service Slides pour Sylvie
Phase 3.10 - Int√©gration Google Slides

Gestion compl√®te des pr√©sentations Google Slides pour KanterMator
"""

import structlog
from datetime import datetime
from typing import List, Dict, Any, Optional
from googleapiclient.discovery import build
from googleapiclient.errors import HttpError

from app.services.google_auth import GoogleAuthService

logger = structlog.get_logger(__name__)

class SlidesService:
    """Service de gestion des pr√©sentations Google Slides"""
    
    def __init__(self):
        self.auth_service = GoogleAuthService()
        self.slides_service = None
        self.drive_service = None
        # Pas d'initialisation synchrone, sera fait lors du premier appel async
    
    async def _ensure_service_initialized(self):
        """Assure que le service Slides est initialis√©"""
        if self.slides_service is None:
            try:
                credentials = await self.auth_service.get_credentials()
                self.slides_service = build('slides', 'v1', credentials=credentials)
                self.drive_service = build('drive', 'v3', credentials=credentials)
                logger.info("‚úÖ Service Slides initialis√©")
            except Exception as e:
                logger.error("‚ùå Erreur initialisation Slides", error=str(e))
                raise
    
    async def create_presentation(self, title: str, template_type: str = "educational") -> Optional[Dict[str, Any]]:
        """
        Cr√©e une nouvelle pr√©sentation
        
        Args:
            title: Titre de la pr√©sentation
            template_type: Type de template (educational, meeting, report)
            
        Returns:
            Informations sur la pr√©sentation cr√©√©e
        """
        await self._ensure_service_initialized()
        
        try:
            # Cr√©ation de la pr√©sentation
            presentation = {
                'title': title
            }
            
            created_presentation = self.slides_service.presentations().create(
                body=presentation
            ).execute()
            
            presentation_id = created_presentation['presentationId']
            
            # Application du template
            await self._apply_template(presentation_id, template_type)
            
            # R√©cup√©ration des informations de la pr√©sentation
            presentation_info = self.slides_service.presentations().get(
                presentationId=presentation_id
            ).execute()
            
            logger.info("‚úÖ Pr√©sentation cr√©√©e", title=title, presentation_id=presentation_id)
            
            return {
                'id': presentation_id,
                'title': presentation_info['title'],
                'url': f"https://docs.google.com/presentation/d/{presentation_id}/edit",
                'slide_count': len(presentation_info.get('slides', [])),
                'template_type': template_type,
                'created_at': datetime.now().isoformat()
            }
            
        except Exception as e:
            logger.error("‚ùå Erreur cr√©ation pr√©sentation", error=str(e))
            return None
    
    async def _apply_template(self, presentation_id: str, template_type: str):
        """Applique un template √† la pr√©sentation"""
        try:
            if template_type == "educational":
                await self._apply_educational_template(presentation_id)
            elif template_type == "meeting":
                await self._apply_meeting_template(presentation_id)
            elif template_type == "report":
                await self._apply_report_template(presentation_id)
                
        except Exception as e:
            logger.warning("‚ö†Ô∏è Erreur application template", error=str(e))
    
    async def _apply_educational_template(self, presentation_id: str):
        """Applique un template √©ducatif"""
        requests = [
            {
                'createSlide': {
                    'objectId': 'slide_title',
                    'insertionIndex': 1,
                    'slideLayoutReference': {
                        'predefinedLayout': 'TITLE_AND_BODY'
                    }
                }
            },
            {
                'insertText': {
                    'objectId': 'slide_title',
                    'text': 'Objectifs d\'apprentissage\n\n‚Ä¢ Point 1\n‚Ä¢ Point 2\n‚Ä¢ Point 3'
                }
            }
        ]
        
        self.slides_service.presentations().batchUpdate(
            presentationId=presentation_id,
            body={'requests': requests}
        ).execute()
    
    async def _apply_meeting_template(self, presentation_id: str):
        """Applique un template de r√©union"""
        requests = [
            {
                'createSlide': {
                    'objectId': 'slide_agenda',
                    'insertionIndex': 1,
                    'slideLayoutReference': {
                        'predefinedLayout': 'TITLE_AND_BODY'
                    }
                }
            },
            {
                'insertText': {
                    'objectId': 'slide_agenda',
                    'text': 'Ordre du jour\n\n1. Introduction\n2. Points principaux\n3. Actions √† suivre'
                }
            }
        ]
        
        self.slides_service.presentations().batchUpdate(
            presentationId=presentation_id,
            body={'requests': requests}
        ).execute()
    
    async def _apply_report_template(self, presentation_id: str):
        """Applique un template de rapport"""
        requests = [
            {
                'createSlide': {
                    'objectId': 'slide_summary',
                    'insertionIndex': 1,
                    'slideLayoutReference': {
                        'predefinedLayout': 'TITLE_AND_BODY'
                    }
                }
            },
            {
                'insertText': {
                    'objectId': 'slide_summary',
                    'text': 'R√©sum√© ex√©cutif\n\n‚Ä¢ R√©sultats cl√©s\n‚Ä¢ Recommandations\n‚Ä¢ Prochaines √©tapes'
                }
            }
        ]
        
        self.slides_service.presentations().batchUpdate(
            presentationId=presentation_id,
            body={'requests': requests}
        ).execute()
    
    async def get_presentations(self, max_results: int = 15) -> List[Dict[str, Any]]:
        """
        R√©cup√®re les pr√©sentations r√©centes
        
        Args:
            max_results: Nombre maximum de pr√©sentations
            
        Returns:
            Liste des pr√©sentations
        """
        await self._ensure_service_initialized()
        
        try:
            # Recherche des pr√©sentations via Drive
            query = "mimeType='application/vnd.google-apps.presentation'"
            results = self.drive_service.files().list(
                q=query,
                pageSize=max_results,
                orderBy='modifiedTime desc',
                fields='files(id, name, modifiedTime, createdTime, webViewLink)'
            ).execute()
            
            files = results.get('files', [])
            presentations = []
            
            for file in files:
                presentations.append({
                    'id': file['id'],
                    'title': file['name'],
                    'url': file['webViewLink'],
                    'modified_time': file['modifiedTime'],
                    'created_time': file['createdTime']
                })
            
            logger.info("üìä Pr√©sentations r√©cup√©r√©es", count=len(presentations))
            return presentations
            
        except Exception as e:
            logger.error("‚ùå Erreur r√©cup√©ration pr√©sentations", error=str(e))
            return []
    
    async def add_slide_with_content(self, presentation_id: str, title: str, content: str, layout: str = "TITLE_AND_BODY") -> bool:
        """
        Ajoute une slide avec du contenu
        
        Args:
            presentation_id: ID de la pr√©sentation
            title: Titre de la slide
            content: Contenu de la slide
            layout: Layout de la slide
            
        Returns:
            True si succ√®s, False sinon
        """
        await self._ensure_service_initialized()
        
        try:
            # G√©n√©ration d'un ID unique pour la slide
            slide_id = f"slide_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
            
            requests = [
                {
                    'createSlide': {
                        'objectId': slide_id,
                        'slideLayoutReference': {
                            'predefinedLayout': layout
                        }
                    }
                }
            ]
            
            # Ajout de la slide
            self.slides_service.presentations().batchUpdate(
                presentationId=presentation_id,
                body={'requests': requests}
            ).execute()
            
            # Ajout du contenu
            content_requests = [
                {
                    'insertText': {
                        'objectId': slide_id,
                        'text': f"{title}\n\n{content}"
                    }
                }
            ]
            
            self.slides_service.presentations().batchUpdate(
                presentationId=presentation_id,
                body={'requests': content_requests}
            ).execute()
            
            logger.info("‚úÖ Slide ajout√©e", presentation_id=presentation_id, title=title)
            return True
            
        except Exception as e:
            logger.error("‚ùå Erreur ajout slide", error=str(e))
            return False
    
    async def get_presentation_info(self, presentation_id: str) -> Optional[Dict[str, Any]]:
        """R√©cup√®re les informations d'une pr√©sentation"""
        await self._ensure_service_initialized()
        
        try:
            presentation = self.slides_service.presentations().get(
                presentationId=presentation_id
            ).execute()
            
            return {
                'id': presentation['presentationId'],
                'title': presentation['title'],
                'slide_count': len(presentation.get('slides', [])),
                'url': f"https://docs.google.com/presentation/d/{presentation_id}/edit"
            }
            
        except Exception as e:
            logger.error("‚ùå Erreur info pr√©sentation", error=str(e))
            return None
    
    async def get_slides_summary_for_sylvie(self) -> Dict[str, Any]:
        """G√©n√®re un r√©sum√© des pr√©sentations pour Sylvie"""
        try:
            presentations = await self.get_presentations(max_results=50)
            
            total_presentations = len(presentations)
            recent_presentations = presentations[:5]
            
            # Analyse des pr√©sentations r√©centes
            presentations_this_week = 0
            presentations_this_month = 0
            
            now = datetime.now()
            
            for pres in presentations:
                try:
                    modified_date = datetime.fromisoformat(pres['modified_time'].replace('Z', ''))
                    days_ago = (now - modified_date).days
                    
                    if days_ago <= 7:
                        presentations_this_week += 1
                    if days_ago <= 30:
                        presentations_this_month += 1
                        
                except:
                    pass
            
            return {
                'total_presentations': total_presentations,
                'recent_presentations': recent_presentations,
                'presentations_this_week': presentations_this_week,
                'presentations_this_month': presentations_this_month,
                'productivity_indicator': 'active' if presentations_this_week > 0 else 'low'
            }
            
        except Exception as e:
            logger.error("‚ùå Erreur r√©sum√© pr√©sentations", error=str(e))
            return {
                'total_presentations': 0,
                'recent_presentations': [],
                'presentations_this_week': 0,
                'presentations_this_month': 0,
                'productivity_indicator': 'unknown'
            }

# Instance globale du service
slides_service = SlidesService()
