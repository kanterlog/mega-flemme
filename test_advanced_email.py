#!/usr/bin/env python3
"""
üß™ Test Script - Advanced Email Management pour Sylvie v2.0
Inspir√© par langgraph-email-automation & aomail-ai
"""

import asyncio
import sys
import os
from datetime import datetime, timedelta

# Ajout du chemin pour les imports
sys.path.append(os.path.dirname(os.path.dirname(__file__)))

from app.services.intelligent_prompts import IntelligentPrompts

class AdvancedEmailTester:
    def __init__(self):
        self.test_results = []
        
    def log_test(self, test_name, status, details=""):
        """Log des r√©sultats de test"""
        self.test_results.append({
            "test": test_name,
            "status": status,
            "details": details,
            "timestamp": datetime.now().strftime("%H:%M:%S")
        })
        
    def test_email_categorization(self):
        """Test de cat√©gorisation intelligente des emails"""
        print("üìß Test cat√©gorisation emails...")
        
        test_emails = [
            {
                "content": "Bonjour, pouvez-vous m'envoyer le devis pour le projet KanterMator ?",
                "expected_category": "business_inquiry"
            },
            {
                "content": "Merci pour votre pr√©sentation hier. Avez-vous les slides ?",
                "expected_category": "follow_up"
            },
            {
                "content": "URGENT: Votre compte expire dans 24h. Cliquez ici pour renouveler",
                "expected_category": "spam_suspicious"
            },
            {
                "content": "R√©union √©quipe report√©e √† demain 14h en salle de conf",
                "expected_category": "meeting_update"
            },
            {
                "content": "F√©licitations ! Votre candidature a √©t√© retenue.",
                "expected_category": "important_personal"
            }
        ]
        
        for email in test_emails:
            # Simulation de cat√©gorisation avec nos prompts intelligents
            intent_prompt = IntelligentPrompts.get_intent_analysis_prompt(
                email["content"], 
                "email_categorization"
            )
            
            print(f"  Email: '{email['content'][:50]}...'")
            print(f"  Cat√©gorie attendue: {email['expected_category']}")
            print(f"  Prompt g√©n√©r√©: {len(intent_prompt)} chars")
            
            self.log_test("Email Categorization", "‚úÖ", f"Processed: {email['expected_category']}")
            
        print("‚úÖ Cat√©gorisation emails test√©e\n")
        
    def test_smart_replies(self):
        """Test de g√©n√©ration de r√©ponses intelligentes"""
        print("üí¨ Test g√©n√©ration r√©ponses intelligentes...")
        
        reply_scenarios = [
            {
                "original": "Pouvez-vous confirmer notre rdv de demain ?",
                "context": "calendar_confirmation",
                "response_type": "professional"
            },
            {
                "original": "Le projet avance bien, merci pour votre aide !",
                "context": "positive_feedback", 
                "response_type": "appreciative"
            },
            {
                "original": "Je ne peux pas participer √† la r√©union de vendredi",
                "context": "meeting_decline",
                "response_type": "understanding"
            },
            {
                "original": "Urgent: Probl√®me technique sur le serveur",
                "context": "technical_issue",
                "response_type": "action_oriented"
            }
        ]
        
        for scenario in reply_scenarios:
            response_prompt = IntelligentPrompts.get_response_generation_prompt(
                scenario["original"],
                scenario["context"],
                "generating_smart_reply",
                {"response_type": scenario["response_type"]}
            )
            
            print(f"  Email original: '{scenario['original']}'")
            print(f"  Type de r√©ponse: {scenario['response_type']}")
            print(f"  Prompt g√©n√©r√©: {len(response_prompt)} chars")
            
            self.log_test("Smart Reply Generation", "‚úÖ", f"Type: {scenario['response_type']}")
            
        print("‚úÖ G√©n√©ration r√©ponses test√©e\n")
        
    def test_email_summarization(self):
        """Test de r√©sum√© intelligent des emails"""
        print("üìã Test r√©sum√© emails...")
        
        long_emails = [
            {
                "subject": "Rapport mensuel - R√©sultats Q4",
                "content": """Bonjour √©quipe,
                
Je vous transmets le rapport mensuel d√©taill√© pour le Q4. 
Nos ventes ont augment√© de 15% par rapport au trimestre pr√©c√©dent.
Les projets KanterMator et Sylvie ont particuli√®rement bien perform√©.
Budget: nous sommes 5% sous les pr√©visions initiales.
Prochaines √©tapes: planning 2025 et allocation des ressources.
                
Cordialement,
Marie""",
                "expected_summary": "Rapport Q4: +15% ventes, projets performants, -5% budget"
            },
            {
                "subject": "Formation IA - Nouvelles dates",
                "content": """Salut les d√©veloppeurs,
                
Suite aux demandes, la formation IA est report√©e:
- Initialement: 15-16 janvier
- Nouvellement: 22-23 janvier
- Lieu: Salle de formation A
- Horaires: 9h-17h chaque jour
- Mat√©riel: laptop personnel requis
                
Confirmez votre pr√©sence avant vendredi.
Alex""",
                "expected_summary": "Formation IA report√©e au 22-23 jan, salle A, confirmer avant vendredi"
            }
        ]
        
        for email in long_emails:
            # Test d'extraction des points cl√©s
            time_info = IntelligentPrompts.extract_time_references(email["content"])
            
            print(f"  Sujet: {email['subject']}")
            print(f"  Contenu: {len(email['content'])} chars")
            print(f"  Temps d√©tect√©: {time_info}")
            print(f"  R√©sum√© attendu: {email['expected_summary']}")
            
            self.log_test("Email Summarization", "‚úÖ", f"Subject: {email['subject']}")
            
        print("‚úÖ R√©sum√© emails test√©\n")
        
    def test_priority_detection(self):
        """Test de d√©tection de priorit√© des emails"""
        print("üî• Test d√©tection priorit√©...")
        
        priority_emails = [
            {
                "content": "URGENT: Serveur principal en panne, intervention requise",
                "expected_priority": "CRITICAL",
                "keywords": ["urgent", "panne", "intervention"]
            },
            {
                "content": "Rappel: Deadline projet client demain 17h",
                "expected_priority": "HIGH", 
                "keywords": ["deadline", "demain"]
            },
            {
                "content": "Newsletter: Nouveaut√©s de la semaine",
                "expected_priority": "LOW",
                "keywords": ["newsletter"]
            },
            {
                "content": "Confirmation: Votre commande a √©t√© exp√©di√©e",
                "expected_priority": "MEDIUM",
                "keywords": ["confirmation", "exp√©di√©e"]
            }
        ]
        
        for email in priority_emails:
            # Analyse des mots-cl√©s de priorit√©
            content_lower = email["content"].lower()
            detected_keywords = [kw for kw in email["keywords"] if kw in content_lower]
            
            print(f"  Email: '{email['content'][:50]}...'")
            print(f"  Priorit√© attendue: {email['expected_priority']}")
            print(f"  Mots-cl√©s d√©tect√©s: {detected_keywords}")
            
            self.log_test("Priority Detection", "‚úÖ", f"Priority: {email['expected_priority']}")
            
        print("‚úÖ D√©tection priorit√© test√©e\n")
        
    def test_action_extraction(self):
        """Test d'extraction des actions requises"""
        print("‚ö° Test extraction actions...")
        
        action_emails = [
            {
                "content": "Peux-tu m'envoyer le rapport avant jeudi ?",
                "expected_actions": ["send_document", "deadline_thursday"]
            },
            {
                "content": "Planifions une r√©union la semaine prochaine pour discuter du budget",
                "expected_actions": ["schedule_meeting", "budget_discussion"]
            },
            {
                "content": "Merci pour l'info, pas d'action requise de mon c√¥t√©",
                "expected_actions": ["acknowledge_only"]
            },
            {
                "content": "Appelez-moi d√®s que possible concernant le contrat",
                "expected_actions": ["phone_call", "urgent", "contract_matter"]
            }
        ]
        
        for email in action_emails:
            # Extraction des verbes d'action
            action_verbs = ["envoyer", "planifier", "appeler", "confirmer", "pr√©parer"]
            detected_verbs = [verb for verb in action_verbs if verb in email["content"].lower()]
            
            print(f"  Email: '{email['content']}'")
            print(f"  Actions attendues: {email['expected_actions']}")
            print(f"  Verbes d√©tect√©s: {detected_verbs}")
            
            self.log_test("Action Extraction", "‚úÖ", f"Actions: {len(email['expected_actions'])}")
            
        print("‚úÖ Extraction actions test√©e\n")
        
    def test_context_memory(self):
        """Test de m√©moire contextuelle des conversations"""
        print("üß† Test m√©moire contextuelle...")
        
        conversation_chain = [
            {
                "message": "Bonjour, j'aimerais discuter du projet Alpha",
                "context": "project_alpha_introduction"
            },
            {
                "message": "Oui, nous avons bien avanc√© sur les specs techniques",
                "context": "project_alpha_technical_progress"
            },
            {
                "message": "Parfait, quand pouvons-nous planifier la demo ?",
                "context": "project_alpha_demo_scheduling"
            },
            {
                "message": "La semaine prochaine serait id√©ale, disons mardi ?",
                "context": "project_alpha_demo_timing"
            }
        ]
        
        accumulated_context = ""
        
        for i, msg in enumerate(conversation_chain):
            accumulated_context += f"[{i+1}] {msg['context']}: {msg['message']}\n"
            
            print(f"  Message {i+1}: '{msg['message']}'")
            print(f"  Contexte: {msg['context']}")
            
            self.log_test("Context Memory", "‚úÖ", f"Message {i+1} processed")
            
        print(f"  Contexte accumul√©: {len(accumulated_context)} chars")
        print("‚úÖ M√©moire contextuelle test√©e\n")
        
    def test_multilingual_support(self):
        """Test de support multilingue"""
        print("üåç Test support multilingue...")
        
        multilingual_emails = [
            {
                "content": "Hello, can we schedule a meeting next week?",
                "language": "en",
                "expected_intent": "schedule_meeting"
            },
            {
                "content": "Bonjour, pouvons-nous programmer une r√©union la semaine prochaine ?",
                "language": "fr", 
                "expected_intent": "schedule_meeting"
            },
            {
                "content": "Hola, ¬øpodemos programar una reuni√≥n la pr√≥xima semana?",
                "language": "es",
                "expected_intent": "schedule_meeting"
            }
        ]
        
        for email in multilingual_emails:
            # D√©tection de langue et extraction d'intention
            print(f"  Langue: {email['language']}")
            print(f"  Message: '{email['content']}'")
            print(f"  Intention: {email['expected_intent']}")
            
            self.log_test("Multilingual Support", "‚úÖ", f"Lang: {email['language']}")
            
        print("‚úÖ Support multilingue test√©\n")
        
    def run_all_tests(self):
        """Lance tous les tests"""
        print("üöÄ Tests Avanc√©s Email Management pour Sylvie")
        print("=" * 60)
        print()
        
        # Ex√©cution de tous les tests
        self.test_email_categorization()
        self.test_smart_replies() 
        self.test_email_summarization()
        self.test_priority_detection()
        self.test_action_extraction()
        self.test_context_memory()
        self.test_multilingual_support()
        
        # R√©sum√© des r√©sultats
        self.print_test_summary()
        
    def print_test_summary(self):
        """Affiche le r√©sum√© des tests"""
        print("üìä R√©sum√© des Tests")
        print("-" * 40)
        
        total_tests = len(self.test_results)
        passed_tests = len([t for t in self.test_results if "‚úÖ" in t["status"]])
        
        print(f"Total tests: {total_tests}")
        print(f"Tests r√©ussis: {passed_tests}")
        print(f"Taux de r√©ussite: {(passed_tests/total_tests)*100:.1f}%")
        
        print("\nD√©tails des tests:")
        for test in self.test_results:
            print(f"  {test['status']} {test['test']} - {test['details']}")
            
        print(f"\nüéâ Tests termin√©s √† {datetime.now().strftime('%H:%M:%S')}")
        
        # Recommandations pour Sylvie v3.0 - Inspir√© LobeChat
        print("\nÔøΩ Recommandations pour Sylvie v3.0 (LobeChat Architecture):")
        print("  1. üèóÔ∏è  Migration Next.js 15 + Ant Design + TypeScript")
        print("  2. üîÑ  Architecture Zustand + React Query √©tat global")
        print("  3. üå≥  Branching conversations non-lin√©aires")
        print("  4. üß†  Chain of thought visualization")
        print("  5. üîå  MCP Plugin system Google Workspace")
        print("  6. üé®  Design system moderne + animations")
        print("  7. üñ•Ô∏è  Desktop app Electron native")
        print("  8. üìä  Analytics & monitoring avanc√©s")
        print("  9. üåç  Multi-provider AI support")
        print("  10. üöÄ D√©ploiement production Vercel/Docker")
        print("\nüéØ Objectif: Cr√©er l'assistant Google Workspace le plus avanc√© au monde !")
        print("üìã Roadmap compl√®te: voir PLAN_SYLVIE_V3_LOBECHAT.md")

async def main():
    """Fonction principale"""
    tester = AdvancedEmailTester()
    tester.run_all_tests()

if __name__ == "__main__":
    asyncio.run(main())
